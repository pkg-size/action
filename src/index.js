import assert from 'assert';
import fs from 'fs';
import * as core from '@actions/core';
import { context } from '@actions/github';
import generateComment from './templates.js';
import exec from './utils/exec.js';
import { sub } from './utils/markdown.js';
import comparePackages from './utils/compare-packages.js';
import upsertComment from './utils/upsert-comment.js';
import isBaseDiffFromHead from './utils/is-base-diff-from-head.js';
import npmCi from './utils/npm-ci.js';

// import {createTempDirectory} from '@actions/cache/lib/internal/cacheUtils';

const COMMENT_SIGNATURE = sub('ðŸ¤– This report was automatically generated by [pkg-size-action](https://github.com/privatenumber/pkg-size-action/)');

async function isFileTracked(filePath) {
	const { exitCode } = await exec(`git ls-files --error-unmatch ${filePath}`, { ignoreReturnCode: true });
	return exitCode === 0;
}

let packageSizeInstalled = false;

async function buildReference({
	ref,
	buildCommand,
}) {
	const cwd = process.cwd();

	core.info(`Current working directory: ${cwd}`);

	if (ref) {
		// const temporaryDir = await createTempDirectory();
		core.info(`Checking out ref '${ref}'`);
		await exec(`git checkout -f ${ref}`);
		/*
		 * For parallel builds
		 * Since this doesn't make it a git repo, installing some deps like husky fails
		 */
		// await exec(`git --work-tree="${temporaryDir}" checkout -f origin/${ref} -- .`);

		// cwd = temporaryDir;
		// log('Changed working directory', cwd);
	}

	if (buildCommand !== 'false') {
		if (!buildCommand) {
			let packageJson;
			try {
				packageJson = JSON.parse(fs.readFileSync('./package.json'));
			} catch (error) {
				core.warning('Error reading package.json', error);
			}

			if (packageJson && packageJson.scripts && packageJson.scripts.build) {
				core.info('Build script found in package.json');
				buildCommand = 'npm run build';
			}
		}

		if (buildCommand) {
			await npmCi({ cwd }).catch((error) => {
				throw new Error(`Failed to install dependencies:\n${error.message}`);
			});

			core.info(`Running build command: ${buildCommand}`);
			await exec(buildCommand, { cwd }).catch((error) => {
				throw new Error(`Failed to run build command: ${buildCommand}\n${error.message}`);
			});
		}
	}

	if (!packageSizeInstalled) {
		core.info('Installing pkg-size globally');
		await exec('yarn global add pkg-size');
		core.addPath((await exec('yarn global bin')).stdout.trim());
		packageSizeInstalled = true;
	}

	core.info('Getting package size');
	const result = await exec('pkg-size --json', { cwd }).catch((error) => {
		throw new Error(`Failed to determine package size: ${error.message}`);
	});
	core.debug(JSON.stringify(result, null, 4));

	const packageData = JSON.parse(result.stdout);

	await Promise.all(packageData.files.map(async (file) => {
		file.isTracked = await isFileTracked(`.${file.path}`);
	}));

	core.info('Cleaning up');
	await exec('git reset --hard'); // Reverts changed files
	const { stdout: cleanList } = await exec('git clean -dfx'); // Deletes untracked & ignored files
	core.debug(cleanList);

	return packageData;
}

(async () => {
	const { GITHUB_TOKEN } = process.env;
	assert(GITHUB_TOKEN, 'Environment variable "GITHUB_TOKEN" not set. Required for accessing and reporting on the PR.');

	const { pull_request: pr } = context.payload;
	const buildCommand = core.getInput('build-command');
	const commentReport = core.getInput('comment-report');
	const unchangedFiles = core.getInput('unchanged-files') || 'collapse';
	const hideFiles = core.getInput('hide-files');
	const sortBy = core.getInput('sort-by') || 'delta';
	const sortOrder = core.getInput('sort-order') || 'desc';

	core.startGroup('Build HEAD');
	const headPackageData = await buildReference({
		buildCommand,
	});
	headPackageData.ref = pr.head;
	core.endGroup();

	const { ref: baseReference } = pr.base;
	let basePackageData;
	if (await isBaseDiffFromHead(baseReference)) {
		core.info('HEAD is different from BASE. Triggering build.');
		core.startGroup('Build BASE');
		basePackageData = await buildReference({
			ref: baseReference,
			buildCommand,
		});
		basePackageData.ref = pr.base;
		core.endGroup();
	} else {
		core.info('HEAD is identical to BASE. No need to build.');
		basePackageData = {
			...headPackageData,
			ref: pr.base,
		};
	}

	const packageComparison = comparePackages(headPackageData, basePackageData, {
		sortBy,
		sortOrder,
		hideFiles,
	});

	core.setOutput('headPkgData', headPackageData);
	core.setOutput('basePkgData', basePackageData);
	core.setOutput('pkgComparison', packageComparison);

	if (commentReport !== 'false') {
		await upsertComment({
			token: GITHUB_TOKEN,
			commentSignature: COMMENT_SIGNATURE,
			repo: context.repo,
			prNumber: pr.number,
			body: generateComment({
				unchangedFiles,
				sortBy,
				sortOrder,
				pkgComparison: packageComparison,
			}),
		});
	}
})().catch((error) => {
	core.setFailed(error.message);
	core.warning(error.stack);
});
